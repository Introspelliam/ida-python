------------------------------------------------------
IDAPython - Python plugin for Interactive Disassembler
------------------------------------------------------
Building From Source
--------------------

REQUIREMENTS
------------

[Tested versions are in brackets]


 - IDA and IDA SDK [> 5.6]
   http://www.hex-rays.com/idapro/

 - Python [2.5.1, 2.6.1, 2.7]
   http://www.python.org/

 - Simplified Wrapper Interface Generator (SWIG) [2.0.12]
   http://www.swig.org/
   Hex-Rays cannot guarantee support for IDAPython
   versions built with other versions of SWIG.

 - Unix utilities (GNU patch on Windows):
   http://www.research.att.com/sw/tools/uwin/ or
   http://unxutils.sourceforge.net/  or
   http://www.cygwin.com/

 - GCC on Linux and Mac OS X [4.0.1, 4.1.3]
   Comes with your distribution

 - Microsoft Visual C on Windows [Microsoft Visual C++ 2008 Express Edition]
   http://msdn.microsoft.com/vstudio/express/visualc/

 - Cygwin (requires GNU make)

BUILDING
--------

Make sure all the needed tools (compiler, swig) are on the PATH.

1. Unpack the IDA SDK into:
   '.../idasdk69'

Note: the path you unpack the IDA SDK into cannot contain white spaces,
   or special characters (such as '(', etc...)


2. Making sure the SDK compiles:
   If you are on:
    - Windows: set environment variable __NT__=1
    - Linux: set environment variable __LINUX__=1
    - Mac OSX: set environment variable __MAC__=1

   then, run 'make'


3. Place the IDAPython sources into the SDK directory, such that the file:
   '.../idasdk69/plugins/idapython/BUILDING.txt' exists

Note: To build with Hex-Rays decompiler support, you will need to copy
   .../ida_install/plugins/hexrays_sdk/include/hexrays.hpp -> .../idasdk69/include/hexrays.hpp

Note: on Windows, you will also have to
   - copy .../idasdk69/lib/x86_win_vc_32 -> .../idasdk69/lib/x86_win_vc_32_opt
   - copy .../idasdk69/lib/x86_win_vc_64 -> .../idasdk69/lib/x86_win_vc_64_opt
   This is a kludge, which we will solve for the next version


4. Build the plugin

   python build.py

   It is possible to build the plugin for different Python versions by
   running build.py with the corresponding Python binary.

   Run 'build.py --help' for more information.


5. Install the components as described in README.md


MISC
----

On 64 bits distributions, you may need to compile Python to generate a 32bit
version of the interpreter:

1. tar xvf Python-2.6.6.tar.bz2
2. cd Python-2.6.6
3. CC="gcc -m32" CXX="c++ -m32" ./configure --prefix=/path/to/py32 --enable-shared
4. make
5. make install
6. cd /path/to/py32/lib
7. ln -s libpython2.6.so.1.0 libpython2.6.so.1
8. PYTHONHOME=/path/to/py32 LD_LIBRARY_PATH=/path/to/py32/lib idaq
